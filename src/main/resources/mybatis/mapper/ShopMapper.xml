<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.delivery.shop.shop.ShopMapper">
    <resultMap id="shopResultMap" type="Shop">
        <id column="SHOP_ID" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="introduce" property="introduce" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="delivery_area_guide" property="deliveryAreaGuide" jdbcType="VARCHAR"/>
        <association property="businessHourPolicy" javaType="BusinessHourPolicy" fetchType="lazy">
            <collection property="businessHours" ofType="BusinessHour"
                        select="findBusinessHoursByShopId" column="SHOP_ID"/>
        </association>
        <association property="closingDayPolicies" javaType="ClosingDayPolicies" fetchType="lazy">
            <collection property="closingDays"
                        select="findClosingDaysByShopId" column="SHOP_ID" />
        </association>
        <association property="categories" javaType="Categories" fetchType="lazy">
            <collection property="categories" select="findCategoriesByShopId"
                        column="SHOP_ID"/>
        </association>
        <association property="suspension" javaType="Suspension">
            <result column="SUSPENSION_FROM" property="from" typeHandler="LocalDateTimeTypeHandler"/>
            <result column="SUSPENSION_TO" property="to" typeHandler="LocalDateTimeTypeHandler"/>
        </association>
    </resultMap>

    <!-- 가게 id로 조회-->
    <select id="findShopById" resultMap="shopResultMap" parameterType="long">
        select ID AS SHOP_ID,
               NAME,
               INTRODUCE,
               PHONE,
               DELIVERY_AREA_GUIDE
        FROM SHOP
        WHERE ID = #{id}
    </select>

    <!-- 가게 id로 카테고리들 조회 (nested Select용) -->
    <select id="findCategoriesByShopId" resultMap="com.delivery.shop.category.CategoryMapper.categoryResultMap">
        SELECT ID AS CATEGORY_ID,
               NAME AS CATEGORY_NAME,
               CS.SHOP_ID AS SHOP_ID
        FROM CATEGORY C
        JOIN CATEGORY_SHOP CS
        ON C.ID = CS.CATEGORY_ID
        WHERE CS.SHOP_ID = ${id}
    </select>

    <!-- 가게별 휴무일 조회(nested select용)-->
    <select id="findClosingDaysByShopId" resultMap="com.delivery.shop.category.ClosingMapper.closingDayResultMap">
        SELECT SHOP_ID,
               CLOSING_TYPE,
               CYCLE_TYPE,
               DAY_OF_WEEK,
               FROM_DATE,
               TO_DATE
        FROM CLOSING_DAY
        WHERE SHOP_ID = #{ID}
    </select>

    <!-- 가게 id로 영업시간 조회 (nested Select용) -->
    <select id="findBusinessHoursByShopId" resultType="BusinessHour">
        select SHOP_ID as shopId,
            OPEN,
            CLOSE,
            DAY_OF_WEEK as dayOfWeek
        from
            BUSINESS_HOUR
        where
            SHOP_ID = #{ID}
    </select>

    <!-- 가게의 소개문 업데이트  -->
    <update id="updateIntroduce" parameterType="map">
        UPDATE SHOP
        SET INTRODUCE = #{introduce}
        WHERE id = #{id}
    </update>

    <!-- 가게의 전화번호 업데이트  -->
    <update id="updatePhone" parameterType="map">
        UPDATE SHOP
        SET PHONE = #{phone}
        WHERE id = #{id}
    </update>

    <!-- 가게의 배달지역안내문 업데이트  -->
    <update id="updateDeliveryAreaGuide" parameterType="map">
        UPDATE SHOP
        SET DELIVERY_AREA_GUIDE = #{guide}
        WHERE id = #{id}
    </update>

    <!-- 가게의 이름 변경 -->
    <update id="updateName" parameterType="map">
        UPDATE SHOP
        SET NAME = #{name}
        WHERE id = #{id}
    </update>

    <!-- 가게의 카테고리 삭제(업데이트 전에 사용됌) -->
    <delete id="deleteCategory" parameterType="long">
        DELETE
        FROM CATEGORY_SHOP
        WHERE SHOP_ID = #{id}
    </delete>

    <!-- 가게의 카테고리 업데이트 -->
    <update id="updateCategory" parameterType="map">
        INSERT INTO CATEGORY_SHOP (CATEGORY_ID, SHOP_ID) VALUES
        <foreach collection="categories.categories" item="cat" separator=",">
            (#{cat.id}, #{id})
        </foreach>
    </update>

    <!-- 가게의 영업시간 업데이트 -->
    <insert id="updateBusinessHours" parameterType="map">
        INSERT INTO BUSINESS_HOUR (SHOP_ID, OPEN, CLOSE, DAY_OF_WEEK)
        VALUES
        <foreach collection="businessHourPolicy.businessHours" item="hour" separator=",">
            (#{hour.shopId}, #{hour.open}, #{hour.close}, #{hour.dayOfWeek})
        </foreach>
        ON DUPLICATE KEY UPDATE OPEN = values(OPEN), CLOSE = values(CLOSE)
    </insert>

    <!-- 가게의 휴무일 삭제   -->
    <delete id="deleteClosingDays" parameterType="long">
        DELETE
        FROM CLOSING_DAY
        WHERE SHOP_ID = #{id}
    </delete>

    <!-- 가게의 휴무일 추가 -->
    <insert id="updateClosingDays" parameterType="map">
        INSERT INTO CLOSING_DAY (SHOP_ID, CLOSING_TYPE, CYCLE_TYPE, DAY_OF_WEEK, FROM_DATE, TO_DATE) VALUES
        <foreach collection="closingDayPolicies.closingDays" item="closing" separator=",">
            <if test="closing instanceof com.delivery.shop.closingday.LegalHolidayClosing">
                (#{id}, #{closing.CLOSING_TYPE}, null, null, null, null)
            </if>
            <if test="closing instanceof com.delivery.shop.closingday.WeeklyRegularClosing">
                (#{id}, #{closing.CLOSING_TYPE}, null, #{closing.dayOfWeek}, null, null)
            </if>
            <if test="closing instanceof com.delivery.shop.closingday.CyclicRegularClosing">
                (#{id}, #{closing.CLOSING_TYPE}, #{closing.cycle}, #{closing.dayOfWeek}, null, null)
            </if>
            <if test="closing instanceof com.delivery.shop.closingday.TemporaryClosing">
                (#{id}, #{closing.CLOSING_TYPE}, null, null, #{closing.from}, #{closing.to})
            </if>
        </foreach>
    </insert>

    <!-- 가게 노출 여부 변경 -->
    <update id="updateExposeStatus" parameterType="map">
        UPDATE SHOP
        SET EXPOSED = #{exposed}
        WHERE id = #{id}
    </update>

    <!-- 영업일시중단 정보 업데이트 -->
    <update id="updateSuspension" parameterType="map">
        INSERT INTO SHOP_SUSPENSION (SHOP_ID, FROM_DATETIME, TO_DATETIME)
        VALUES (#{id}, #{suspension.from}, #{suspension.to}) ON DUPLICATE KEY
        UPDATE FROM_DATETIME =
        VALUES (FROM_DATETIME), TO_DATETIME =
        VALUES (TO_DATETIME)
    </update>

</mapper>
